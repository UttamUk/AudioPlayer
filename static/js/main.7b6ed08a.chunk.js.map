{"version":3,"sources":["Views/Player/Player.js","App.js","serviceWorker.js","index.js"],"names":["songsList","id","title","author","song","Player","state","currentSong","currentTime","durationVal","rangeMax","rangeValue","updateTime","fillColor","isPlaying","playStatus","audio","Audio","playSong","document","getElementById","newSong","find","res","console","log","url","src","setState","duration","muted","promise","play","undefined","then","_","dur","formatTime","catch","error","pause","addEventListener","updateWidth","prevState","length","seconds","h","Math","floor","m","s","toFixed","filter","a","join","handleChange","event","preventDefault","target","value","nextSong","prevSong","playSongFromList","val","this","className","alt","NaN","style","width","type","name","min","max","defaultValue","onChange","onClick","map","list","key","Component","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7b6ed08a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst songsList = [\n    { id: 0, title: \"Let Me Hold You\", author: \"Cheat Codes, Dante Klein\", song: \"../images/Let_Me_Hold_You.mp3\" },\n    { id: 1, title: \"Criminal\", author: \"Britney Spears\", song: \"../images/Criminal.mp3\" },\n    { id: 2, title: \"Saxobeat\", author: \"Alexandra Stan\", song: \"../images/Saxobeat.mp3\" },\n    { id: 3, title: \"Stay With Me\", author: \"Akcent\", song: \"../images/Stay_With_Me.mp3\" },\n    { id: 4, title: \"That's My Name\", author: \"Akcent\", song: \"../images/Thats_My_Name.mp3\" },\n    { id: 5, title: \"The Spark\", author: \"Akcent\", song: \"../images/The_Spark.mp3\" },\n    { id: 6, title: \"We Found Love\", author: \"Rihanna\", song: \"../images/We_Found_Love.mp3\" },\n    { id: 7, title: \"Love Stoned\", author: \"Rihanna\", song: \"../images/Love_Stoned.mp3\" },\n];\n\nclass Player extends Component {\n    state = {\n        currentSong: 0,\n        currentTime: 0.0,\n        durationVal: 0.0,\n        rangeMax: 0,\n        rangeValue: 0,\n        updateTime: 0,\n        fillColor: 0,\n        isPlaying: true,\n        playStatus: false,\n        title: '',\n        author: '',\n\n    }\n    audio = new Audio();\n\n    componentDidMount() {\n        this.playSong();\n    }\n\n    componentWillMount() {\n        this.audio.pause();\n    }\n\n    playSong = () => {\n        var range = document.getElementById(\"range\");\n        const newSong = songsList.find(res => res.id === this.state.currentSong);\n        console.log(this.state.isPlaying);\n        const { isPlaying } = this.state;\n        if (isPlaying) {\n            let url = newSong?.song;\n            // var audio = new Audio(url);\n            this.audio.src = url\n            this.setState({\n                title: newSong?.title,\n                author: newSong?.author,\n                rangeMax: this.audio.duration\n            });\n            // this.audio.onloadeddata = () => {\n            //     this.setState({\n            //         title: newSong?.title,\n            //         author: newSong?.author,\n            //         rangeMax: this.audio.duration\n            //     });\n            // }\n            this.audio.muted = false;\n            var promise = this.audio.play();\n            if (promise !== undefined) {\n                promise.then(_ => {\n                    var dur = this.audio.duration;\n                    this.setState({\n                        // ...this.state,\n                        isPlaying: !this.state.isPlaying,\n                        title: newSong?.title,\n                        author: newSong?.author,\n                        durationVal: this.formatTime(dur),\n                        rangeMax: this.audio.duration\n                    });\n                }).catch(error => {\n                    console.log(\"playback prevented\");\n                });\n            }\n        } else {\n            this.audio.muted = true;\n            this.audio.pause();\n            this.setState({\n                isPlaying: this.state.isPlaying\n            });\n        }\n\n\n        // range.addEventListener(\"change\", () => {\n        //     this.audio.currentTime = range.value;\n        // });\n\n        this.audio.addEventListener(\"timeupdate\", () => {\n            let updateWidth = this.audio.currentTime / this.audio.duration;\n            // range.value = this.audio.currentTime;\n            this.setState((prevState) => {\n                return {\n                    // ...this.state,\n                    fillColor: updateWidth * 100 + \"%\",\n                    rangeValue: this.audio.currentTime,\n                    updateTime: this.formatTime(this.audio.currentTime)\n                }\n            });\n        });\n\n        this.audio.addEventListener(\"ended\", () => {\n            if (this.state.currentSong <= songsList.length) {\n                this.setState({\n                    currentSong: this.state.currentSong + 1\n                });\n            } else {\n                this.setState({\n                    currentSong: 0\n                });\n            }\n            this.playSong();\n        });\n    }\n\n    formatTime = (seconds) => {\n        const h = Math.floor(seconds / 3600)\n        const m = Math.floor((seconds % 3600) / 60)\n        const s = (seconds % 60).toFixed(0);\n        return [h, m > 9 ? m : h ? '0' + m : m || '0', s > 9 ? s : '0' + s]\n            .filter(a => a)\n            .join(':')\n    }\n\n    handleChange = (event) => {\n        event.preventDefault();\n        this.audio.currentTime = event.target.value;\n    }\n\n\n    nextSong = () => {\n        if (this.state.currentSong <= songsList.length) {\n            this.setState((prevState) => {\n                return {\n                    isPlaying: true,\n                    currentTime: 0,\n                    currentSong: this.state.currentSong + 1\n                }\n            });\n        } else {\n            this.setState((prevState) => {\n                return {\n                    isPlaying: true,\n                    currentSong: 0\n                }\n            });\n        }\n        this.playSong();\n    }\n\n    prevSong = () => {\n        if (this.state.currentSong !== 0) {\n            if (this.state.currentSong <= songsList.length && this.state.currentSong > 0) {\n                this.setState((prevState) => {\n                    return {\n                        isPlaying: true,\n                        currentSong: this.state.currentSong - 1\n                    }\n                });\n            } else {\n                this.setState((prevState) => {\n                    return {\n                        isPlaying: true,\n                        currentSong: 0\n                    }\n                });\n            }\n            console.log(this.state.isPlaying);\n\n            this.playSong();\n        }\n    }\n\n\n    playSongFromList = (val) => {\n        if (this.state.currentSong === val) {\n            return\n        }\n        this.setState({\n            isPlaying: true,\n            currentSong: val,\n            currentTime: 0,\n        });\n        console.log(this.state.isPlaying);\n        this.playSong();\n    }\n\n    render() {\n        const { currentSong, title, author, durationVal, rangeMax,\n            rangeValue, fillColor, updateTime, isPlaying } = this.state;\n\n        return (\n            <section className=\"player\">\n                <div className=\"player-box\">\n                    <div className=\"player-header\">\n                        <button className=\"player-top player-back\">\n                            <i className=\"fas fa-chevron-left\" />\n                        </button>\n                        <div className=\"player-name\">Playing now</div>\n                        <button className=\"player-top player-menu\">\n                            <i className=\"fas fa-bars\" />\n                        </button>\n                    </div>\n                    <div className=\"album\">\n                        <img src=\"images/cd.png\" alt=\"no images\" />\n                    </div>\n                    <h5 className=\"song-name\" id=\"title\">{title ? title : 'Song name'}</h5>\n                    <p className=\"song-author\" id=\"author\">{author ? author : 'Author'}</p>\n                    <div className=\"song-progress\">\n                        <span className=\"time time1\" id=\"updateTime\">{updateTime}</span>\n                        <span className=\"time time2\" id=\"songLength\">{durationVal === NaN ? 0 : durationVal}</span>\n                        <div className=\"fill\" id=\"fillColor\" style={{ width: fillColor }} />\n                        <input\n                            type=\"range\"\n                            name=\"range\"\n                            min={0}\n                            max={rangeMax === NaN ? 0 : rangeMax}\n                            defaultValue={rangeValue}\n                            onChange={this.handleChange}\n                            id=\"range\"\n                            className=\"range\" />\n                    </div>\n                    <div className=\"player-footer\">\n                        <button className=\"player-bottom prev\" onClick={this.prevSong}>\n                            <i className=\"fas fa-backward\" />\n                        </button>\n                        <button className={`player-bottom play ${isPlaying ? 'play1' : ''}`} onClick={this.playSong}>\n                            <i className=\"fas fa-play\" />\n                            <i className=\"fas fa-pause\" />\n                        </button>\n                        <button className=\"player-bottom next\" onClick={this.nextSong}>\n                            <i className=\"fas fa-forward\" />\n                        </button>\n                    </div>\n                </div>\n                <div className=\"player-box player-box1\">\n                    <div className=\"player-header\">\n                        <div className=\"player-name text-center\">Play List</div>\n                    </div>\n                    <div className=\"playlist-body\">\n                        <div className=\"playlist-child\">\n                            <i className=\"fas fa-heart text-danger\" />\n                        </div>\n                        <div className=\"album\">\n                            <img src=\"images/music.jpg\" alt=\"no images\" />\n                        </div>\n                        <div className=\"playlist-child\">\n                            <i className=\"fas fa-ellipsis-h\" />\n                        </div>\n                    </div>\n                    <div className=\"playlist-box\" id=\"list\">\n                        {songsList.map((list) => <div className={`playlist ${currentSong === list?.id ? 'active' : ''}`} key={list?.id}>\n                            <div className=\"songinfo\">\n                                <h6 className=\"songinfo-name\">{list?.title}</h6>\n                                <p className=\"songinfo-author\">{list?.author}</p>\n                            </div>\n                            <div className=\"song-status\">\n                                <button className={`player-bottom play ${currentSong === list?.id ? 'play1' : ''}`} onClick={() => this.playSongFromList(list?.id)}>\n                                    <i className=\"fas fa-play ml-1\"></i>\n                                    <i className=\"fas fa-pause\"></i>\n                                </button>\n                            </div>\n                        </div>\n                        )}\n                        {/* <div className=\"playlist\">\n                            <div className=\"songinfo\">\n                                <h6 className=\"songinfo-name\">Song name</h6>\n                                <p className=\"songinfo-author\">Author</p>\n                            </div>\n                            <div className=\"song-status\">\n                                <button className=\"player-bottom play\">\n                                    <i className=\"fas fa-play ml-1\" />\n                                    <i className=\"fas fa-pause\" />\n                                </button>\n                            </div>\n                        </div>\n                        <div className=\"playlist active\">\n                            <div className=\"songinfo\">\n                                <h6 className=\"songinfo-name\">Song name</h6>\n                                <p className=\"songinfo-author\">Author</p>\n                            </div>\n                            <div className=\"song-status\">\n                                <button className=\"player-bottom play play1\">\n                                    <i className=\"fas fa-play ml-1\" />\n                                    <i className=\"fas fa-pause\" />\n                                </button>\n                            </div>\n                        </div> */}\n                    </div>\n                </div>\n            </section>\n\n        )\n    }\n}\n\nexport default Player;\n","import React from 'react';\nimport Player from './Views/Player/Player';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Player />\n      <p className=\"small text-muted\">\n        Inspired from \n        <a href=\"https://dribbble.com/shots/9517002--Light-Mode-Simple-Music-Player\">https://dribbble.com/shots/9517002--Light-Mode-Simple-Music-Player</a>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}